// Copyright (c) 2015-2016 The Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "pos.h"

#include "chain.h"
#include "chainparams.h"
#include "coins.h"
#include "hash.h"
#include "hash.h"
#include "main.h"
#include "uint256.h"
#include "util.h"
#include "primitives/transaction.h"
#include "consensus/validation.h"
#include "script/standard.h"
#include "consensus/consensus.h"
#include "policy/policy.h"

// Stake Modifier (hash modifier of proof-of-stake):
// The purpose of stake modifier is to prevent a txout (coin) owner from
// computing future proof-of-stake generated by this txout at the time
// of transaction confirmation. To meet kernel protocol, the txout
// must hash with a future stake modifier to generate the proof.

const int STAKE_TIMESTAMP_MASK = 15;

uint256 ComputeStakeModifier(const CBlockIndex* pindexPrev, const uint256& kernel)
{
    if (!pindexPrev)
        return uint256(); // genesis block's modifier is 0

    CHashWriter ss(SER_GETHASH, 0);
    ss << kernel << pindexPrev->nStakeModifier;
    return ss.GetHash();
}

// Check whether the coinstake timestamp meets protocol
bool CheckCoinStakeTimestamp(int64_t nTimeBlock, int64_t nTimeTx)
{
    return (nTimeBlock == nTimeTx);
}

// BlackCoin kernel protocol v3
// coinstake must meet hash target according to the protocol:
// kernel (input 0) must meet the formula
//     hash(nStakeModifier + txPrev.nTime + txPrev.vout.hash + txPrev.vout.n + nTime) < bnTarget * nWeight
// this ensures that the chance of getting a coinstake is proportional to the
// amount of coins one owns.
// The reason this hash is chosen is the following:
//   nStakeModifier: scrambles computation to make it very difficult to precompute
//                   future proof-of-stake
//   txPrev.nTime: slightly scrambles computation
//   txPrev.vout.hash: hash of txPrev, to reduce the chance of nodes
//                     generating coinstake at the same time
//   txPrev.vout.n: output number of txPrev, to reduce the chance of nodes
//                  generating coinstake at the same time
//   nTime: current timestamp
//   block/tx hash should not be used here as they can be generated in vast
//   quantities so as to generate blocks faster, degrading the system back into
//   a proof-of-work situation.

bool CheckStakeKernelHash(const CBlockIndex* pindexPrev, unsigned int nBits, const CCoins* txPrev, const COutPoint& prevout, unsigned int nTimeTx)
{
    // Weight
    int64_t nValueIn = txPrev->vout[prevout.n].nValue;
    if (nValueIn == 0)
        return false;

    // Base target
    arith_uint256 bnTarget;
    bnTarget.SetCompact(nBits);

    // Calculate hash
    CHashWriter ss(SER_GETHASH, 0);
    ss << pindexPrev->nStakeModifier << txPrev->nTime << prevout.hash << prevout.n << nTimeTx;
    uint256 hashProofOfStake = ss.GetHash();

    // Now check if proof-of-stake hash meets target protocol
    if (UintToArith256(hashProofOfStake) / nValueIn > bnTarget){
		LogPrintf("CheckKernel() : hash does not meet protocol target \n");
        return false;        
	}

    return true;
}

bool CheckKernel(CBlockIndex* pindexPrev, unsigned int nBits, int64_t nTime, const COutPoint& prevout, int64_t* pBlockTime)
{
    uint256 hashProofOfStake, targetProofOfStake;
    CValidationState state;
    const CChainParams& chainparams = Params();
    CCoinsViewCache &view = *pcoinsTip;
    const CCoins *coins = view.AccessCoins(prevout.hash);
    if (!coins)
        return false;

    // Read block header
    CBlock block;
    if (!ReadBlockFromDisk(block, pindexPrev, chainparams.GetConsensus()))
        return false;

    // Maturity requirement
    if (pindexPrev->nHeight - coins->nHeight < STAKE_MIN_CONFIRMATIONS)
        return false;

    if (pBlockTime)
        *pBlockTime = block.GetBlockTime();

    // Min age requirement
    if (coins->nTime + Params().GetConsensus().nStakeMinAge > nTime) // Min age requirement
        return false;

    return CheckStakeKernelHash(pindexPrev->pprev, block.nBits, coins, prevout, block.vtx[1].nTime);
}

// Check kernel hash target and coinstake signature
bool CheckProofOfStake(CBlockIndex* pindexPrev, const CTransaction& tx, unsigned int nBits, uint256& hashProofOfStake, uint256& targetProofOfStake)
{
    CValidationState state;
    const CChainParams& chainparams = Params();

    if (!tx.IsCoinStake())
        return error("CheckProofOfStake() : called on non-coinstake %s \n", tx.GetHash().ToString());

    // Kernel (input 0) must match the stake hash target per coin age (nBits)
    const CTxIn& txin = tx.vin[0];

    // First try finding the previous transaction in database
    CCoinsViewCache &view = *pcoinsTip;
    const COutPoint &prevout = txin.prevout;
    const CCoins *coins = view.AccessCoins(prevout.hash);
    if (!coins)
        return state.DoS(100, error("%s: kernel input unavailable", __func__), REJECT_INVALID, "bad-cs-kernel");

    CTransaction prevtx;
    uint256 hashBlock;
    const uint256& hash = txin.prevout.hash;
    
    if (!GetTransaction(hash, prevtx, Params().GetConsensus(), hashBlock, true))
        return state.DoS(1, false, REJECT_INVALID, "read-txPrev-failed");

    // Verify signature
    const CTxOut& txout = prevtx.vout[txin.prevout.n];
    if (txin.prevout.n >= prevtx.vout.size()) return false;
    if (txin.prevout.hash != prevtx.GetHash()) return false;
    ScriptError serror = SCRIPT_ERR_OK;

    if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, SCRIPT_VERIFY_NONE, TransactionSignatureChecker(&tx, 0), &serror))
       return state.DoS(100, error("CheckProofOfStake() : VerifySignature failed on coinstake %s, scriptsig = %s,  scriptPubKey=%s , extsiting errors = %s \n",
			tx.GetHash().ToString(), txin.scriptSig.ToString(), txout.scriptPubKey.ToString(), std::string(ScriptErrorString(serror)).c_str()));

    // Read block header
    CBlock block;
    if (!ReadBlockFromDisk(block, pindexPrev, chainparams.GetConsensus()))
       return fDebug? error("CheckProofOfStake(): *** ReadBlockFromDisk failed at %d, hash=%s \n", pindexPrev->nHeight, pindexPrev->GetBlockHash().ToString()) : false;

    // Min age requirement
    if (pindexPrev->nHeight - coins->nHeight < STAKE_MIN_CONFIRMATIONS)
       return state.DoS(100, error("%s: tried to stake at depth %d \n", __func__, pindexPrev->nHeight - coins->nHeight), REJECT_INVALID, "bad-cs-premature");

    if (prevtx.nTime + Params().GetConsensus().nStakeMinAge > tx.nTime) // Min age requirement
        return error("CheckProofOfStake() : min age violation - nTimeBlockFrom=%d nStakeMinAge=%d nTimeTx=%d \n", coins->nTime, Params().GetConsensus().nStakeMinAge, tx.nTime);

    if (!CheckStakeKernelHash(pindexPrev->pprev, block.nBits, coins, prevout, block.vtx[1].nTime))
       return state.DoS(1, error("%s: pos hash doesn't match nBits \n", __func__), REJECT_INVALID, "bad-cs-proofhash");

    return true;
}

